'''
Landkreis data from https://github.com/jgehrcke/covid-19-germany-gae
'''
import os
import numpy as np
import pandas as pd
import covidfuncs.dffuncs as cvdff
import covidinput.landkreise as landkreise
import covidinput.rki as rki

coviddata_rki_raw = rki.coviddata_all_rki

coviddata_rki = pd.read_csv(
    os.environ['HOME'] +
    "/covid19/data/covid-19-germany-gae/cases-rki-by-ags.csv",
    sep=',',
)

coviddata_risklayer = pd.read_csv(
    os.environ['HOME'] +
    "/covid19/data/covid-19-germany-gae/cases-rl-crowdsource-by-ags.csv",
    sep=',',
)

landkreis_meta = landkreise.landkreisdata


def coviddata_landkreise(switch="rki"):
    """
    Dataframe with columns for Landkreise and date=-index input from gae repository

    https://github.com/jgehrcke/covid-19-germany-gae

    """

    if switch == "rki":
        coviddata_landkreise = coviddata_rki
    elif switch == "rl":
        coviddata_landkreise = coviddata_risklayer

    # Rename Landkreise from AGS specifier
    for rs in coviddata_landkreise.columns[1:]:

        landkreisname = landkreise.landkreisname(rs)

        coviddata_landkreise = coviddata_landkreise.rename(
            {
                rs: landkreisname,
            }, axis=1)

    # Time index handling
    coviddata_landkreise.index = pd.to_datetime(
        coviddata_landkreise["time_iso8601"], utc=True)
    coviddata_landkreise = coviddata_landkreise.drop("time_iso8601", axis=1)

    # np.float64 type
    coviddata_landkreise = coviddata_landkreise.apply(np.float64)

    return coviddata_landkreise


def coviddata_landkreise_raw(startdat=pd.to_datetime("2020/03/01", utc=True)):
    """
    Landkreis data from raw RKI data

    """

    now = pd.to_datetime(coviddata_rki_raw["Meldedatum"].max(), utc=True)
    print(now)

    dats = [
        startdat + pd.Timedelta(days=i)
        for i in range((now - startdat).days + 2)
    ]

    coviddata_landkreise_raw = pd.DataFrame([
        coviddata_rki_raw["AnzahlFall"][
            pd.to_datetime(coviddata_rki_raw["Meldedatum"], utc=True) < dat]
        [coviddata_rki_raw["IdLandkreis"] ==
         landkreise.landkreis_rs["Landkreis Greiz"][0]].sum() for dat in dats
    ],
                                            index=dats,
                                            columns=["Landkreis Greiz"])

    # Sum of cases in Landkreise from raw data
    for i, landkreisname in enumerate(landkreise.landkreis_rs.columns):

        print(
            landkreisname, " Fortschritt: ",
            str(np.round(i / len(landkreise.landkreis_rs.columns) * 100.0, 1)),
            "%")

        # Extract single landkreis partition from full dataframe
        coviddata_single_landkreis_raw = coviddata_rki_raw[
            coviddata_rki_raw["IdLandkreis"] ==
            landkreise.landkreis_rs[landkreisname][0]]

        # Find dates and number of cases
        coviddata_landkreise_raw[landkreisname] = [
            coviddata_single_landkreis_raw["AnzahlFall"][
                pd.to_datetime(coviddata_single_landkreis_raw["Meldedatum"],
                               utc=True) < dat].sum() for dat in dats
        ]

    # np.float64 type
    coviddata_landkreise_raw = coviddata_landkreise_raw.apply(np.float64)

    # Save dataframe
    coviddata_landkreise_raw.to_pickle(
        os.environ["HOME"] + "/covid19/data/coviddata_landkreise_raw.pkl")

    return coviddata_landkreise_raw
