'''
Landkreis metadata from https://npgeo-corona-npgeo-de.hub.arcgis.com/datasets/917fc37a709542548cc3be077a786c17_0

Quellenvermerk: Robert Koch-Institut (RKI), dl-de/by-2-0
'''

import os
import numpy as np
import pandas as pd
# import covidfuncs.dffuncs as cvdff

# Explicitly downloaded version
landkreisdata = pd.read_csv(
    os.environ['HOME'] + "/covid19/data/RKI_Corona_Landkreise.csv",
    sep=',',
)


def landkreisname(rs):
    """
    Get Name of Landkreis from RS specifier.
    """

    if type(rs) == int:
        rs = str(rs)

    if rs == "11000":
        landkreisname = "Berlin"
    elif rs == "sum_cases":
        landkreisname = "Germany"
    elif rs == "3152":
        landkreisname = "Unbekannt"
    else:
        landkreisname = (
            list(landkreisdata["BEZ"][landkreisdata["RS"] == np.int(rs)])[0] +
            " " +
            list(landkreisdata["GEN"][landkreisdata["RS"] == np.int(rs)])[0])

    return landkreisname


landkreis_einwohner = pd.DataFrame(
    np.array(landkreisdata["EWZ"]) / 100000.0,
    index=np.array([landkreisname(rs) for rs in landkreisdata["RS"]])).T

landkreis_now_diff = pd.DataFrame(
    np.array(landkreisdata["cases7_per_100k"]),
    index=np.array([landkreisname(rs) for rs in landkreisdata["RS"]])).T

landkreis_rs = pd.DataFrame(
    np.array(landkreisdata["RS"]),
    index=np.array([landkreisname(rs) for rs in landkreisdata["RS"]])).T
