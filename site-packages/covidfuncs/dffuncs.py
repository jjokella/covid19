import numpy as np
import pandas as pd
import scipy.optimize as sco
import covidfuncs.datfuncs as cvdf
import covidfuncs.sirmodel as sir


def add_log(covid_df, col):
    """
    Add the logarithm to the dataframe
    """

    covid_df[col + " (Log)"] = covid_df[col].apply(np.log10)


def add_growth_factor(covid_df, col):
    """
    Add the growth factor to the dataframe

    Take into account time differencs
    """

    facs = covid_df[col] / covid_df[col].shift(1)

    x = cvdf.get_x(covid_df)
    difx = x["x"] - x["x"].shift(1)

    covid_df[col + " (Growth Factor)"] = facs**(1 / difx)


def add_exponential_fit(covid_df, col, mincol=100, maxcol=20000):
    """
    Add the exponential fit to the dataframe
    """

    fit = get_log_fit(covid_df, col, mincol, maxcol)

    x = cvdf.get_x(covid_df)

    covid_df[col + " Fit (Log)"] = pd.Series(fit(x["x"]), index=covid_df.index)
    covid_df[col + " Fit (Exp)"] = pd.Series(
        np.exp(np.log(10) * fit(x["x"])),
        index=covid_df.index,
    )
    add_growth_factor(covid_df, col + " Fit (Exp)")


def get_log_fit(covid_df, col, mincol=100, maxcol=20000):
    """
    Get the exponential fit function from the dataframe
    """
    if not col + " (Log)" in covid_df.columns:
        add_log(covid_df, col)

    x = cvdf.get_x(covid_df)

    if np.max(covid_df[col]) < mincol or np.min(covid_df[col]) > maxcol:
        raise RuntimeError("Check mincol and maxcol!")

    fit = np.poly1d(
        np.polyfit(
            x["x"][covid_df[col] < maxcol][covid_df[col] > mincol],
            covid_df[col +
                     " (Log)"][covid_df[col] < maxcol][covid_df[col] > mincol],
            1))

    return fit


def get_log_fit_dates(covid_df,
                      col,
                      startdat=pd.Timestamp("2020/03/01"),
                      enddat=pd.Timestamp("2020/12/31")):
    """
    Get the log fit function from the dataframe from dates
    """
    if not col + " (Log)" in covid_df.columns:
        add_log(covid_df, col)

    x = cvdf.get_x(covid_df)

    fit = np.poly1d(
        np.polyfit(x["x"][startdat:], covid_df[col + " (Log)"][startdat:], 1))

    return fit


# Logistic curve
def logistic(x, L, k, x0, y0):
    return L / (1. + np.exp(-k * (x - x0))) + y0


def get_logistic_fit(covid_df, col, startdat):
    """
    Get the logistic fit function from the dataframe
    """

    x = cvdf.get_x(covid_df)

    L, k, x0, y0 = sco.curve_fit(
        logistic,
        x[startdat:]["x"],
        covid_df[col][startdat:],
        method="trf",
        p0=[8000.0, 0.5, 10.0, 0.0],
        sigma=[1.0 for i in range(len(covid_df[col][startdat:].index))],
        absolute_sigma=True,
        check_finite=True)[0]

    return L, k, x0, y0


def add_logistic_fit(covid_df, col, startdat):
    """
    Add the logistic fit to the dataframe
    """

    x = cvdf.get_x(covid_df)

    L, k, x0, y0 = get_logistic_fit(covid_df, col, startdat)

    covid_df[col + " Fit (Logistic)"] = logistic(x, L, k, x0, y0)


def add_diff(covid_df, col):
    """
    Add additional infections scaled to days
    """

    x = cvdf.get_x(covid_df)

    covid_df[col + " Diff"] = covid_df[col].diff() / x["x"].diff()


def add_mov_avg(covid_df, col, window=7.0):
    """
    Add lag of a fw scaled to days
    """

    x = cvdf.get_x(covid_df)

    ma_col = col + " MA" + str(window)

    covid_df[ma_col] = covid_df[col]

    for index, row in covid_df.iterrows():

        # Mean in window
        ma = covid_df[col][x["x"] <= x["x"][index]][x["x"] > x["x"][index] -
                                                    window].mean()

        covid_df.loc[index, ma_col] = ma


def add_tdouble(covid_df, col, window=7.0, mincol=100):
    """
    Add tdouble for window of days
    """

    x = cvdf.get_x(covid_df)

    td_col = col + " TDouble" + str(window)

    covid_df[td_col] = covid_df[col]

    for index, row in covid_df.iterrows():

        # Min and max in window
        tmp_mincol = covid_df[col][x["x"] <= x["x"][index]][
            x["x"] > x["x"][index] - window].min() - 1.0
        tmp_maxcol = covid_df[col][x["x"] <= x["x"][index]][
            x["x"] > x["x"][index] - window].max() + 1.0

        tmp_mincol = max(mincol, tmp_mincol)

        # Size in window
        covidsize = covid_df[col][covid_df[col]<tmp_maxcol][covid_df[col]>tmp_mincol].size

        # Mean in window
        if covidsize >= window:
            td = sir.get_tdouble(covid_df, col, mincol=tmp_mincol, maxcol=tmp_maxcol)
        else:
            td = 0.0

        covid_df.loc[index, td_col] = td
